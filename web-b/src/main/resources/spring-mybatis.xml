<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">

    <!-- 数据源配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc_driverClassName}"/>


        <property name="url" value="${jdbc_url}"/>

        <property name="username" value="${jdbc_username}"/>

        <property name="password" value="${jdbc_password}"/>

        <!-- 连接池最大使用连接数 -->
        <property name="maxActive" value="${jdbc_maxActive}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${jdbc_initialSize}"/>

        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${jdbc_maxWait}"/>

        <!-- 连接池最大空闲 -->
        <!--<property name="maxIdle" value="${jdbc_maxIdle}"/>-->

        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${jdbc_minIdle}"/>

        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned" value="${jdbc_removeAbandoned}"/>

        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout" value="${jdbc_removeAbandonedTimeout}"/>

        <!-- 连接属性 -->
        <property name="connectionProperties" value="${jdbc_connectionProperties}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc_timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc_minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${jdbc_validationQuery}"/>

        <property name="testWhileIdle" value="${jdbc_testWhileIdle}"/>

        <property name="testOnBorrow" value="${jdbc_testOnBorrow}"/>

        <property name="testOnReturn" value="${jdbc_testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${jdbc_poolPreparedStatements}" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc_maxPoolPreparedStatementPerConnectionSize}" />


        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${jdbc_filters}"/>

    </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
        <property name="mapperLocations"
                  value="classpath*:/sqlmaps/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>
    <!-- configLocation为mybatis属性 mapperLocations为所有mapper -->

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.sun3d.why.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory"/>



    <!-- 对数据源进行事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource">
        <property name="globalRollbackOnParticipationFailure" value="false" />
    </bean>
    <tx:annotation-driven/>
    <!-- 提交事务的类中的方法配置 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false" />
            <tx:method name="insert*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false"/>
            <tx:method name="update*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false"/>
            <tx:method name="edit*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false"/>
            <tx:method name="delete*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false"/>
            <tx:method name="add*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false"/>
            <tx:method name="del*" rollback-for="Exception "
                       propagation="REQUIRED" read-only="false"/>
            <tx:method name="query*" rollback-for="Exception "
                      read-only="true"/>
            <tx:method name="select*" rollback-for="Exception "
                       read-only="true"/>
            <tx:method name="*"  propagation="REQUIRED" rollback-for="Exception "/>
        </tx:attributes>
    </tx:advice>
    <!-- 进行 aop 的事务配置 -->
    <!-- 设置配置提交事务类的路径 把类和方法对应起来 -->
    <aop:config>
        <aop:pointcut expression="execution(* com.sun3d.why.*service.impl.*.*(..))"
                      id="transactionAOP"/>
        <aop:pointcut expression="execution(* com.sun3d.why.*webservice.service.*(..))"
                      id="transactionAOPws"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionAOP"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionAOPws"/>
    </aop:config>
</beans>